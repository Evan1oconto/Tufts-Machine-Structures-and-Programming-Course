// printd.ums
// by elocon01, mmorni01, 12/10/20
// contains a function used to print the universal machine words into decimal 
// notation

.temps r6, r7
.zero r0

// section contains procedures/definitions used to output the necessary decimal
// numbers
.section text
        // prints provided um binary word as decimal
        // expects word to be on top of function stack when function called
        printd:
            push r1 on stack r2
            push r3 on stack r2
            push r4 on stack r2
            r4 := m[r0][r2 + 3]

            
            if (r4 == r0) goto print_zero using r3
            r5 := -2147483648
            if (r4 == r5) goto print_mostneg using r3
            if (r4 <s r0) goto print_neg using r3
            if (r4 >s r0) goto print_pos using r3
        
        // prints um binary word as decimal
        // assumes r4 holds negative um binary word that is nonzero
        print_neg:
            output '-'
            r4 := ~r4
            r4 := r4 + 1
        
        // prints positive um binary word
        // assumes word in r4 and is positive and nonzero    
        print_pos:
            r5 := 0
            goto print_dec
            
        // special case to print out "most negative" number, 0x80000000
        print_mostneg:
            output "-2147483648"
            goto finish_printd
            
        // special case to print out 
        print_zero:
            output "0"

        // fixes registers and returns 0 value for success, nonzero otherwise
        finish_printd:
            output '\n'
            pop r4 off stack r2
            pop r3 off stack r2
            pop r5 off stack r2
            r1 := 0
            goto r5


        // recursive loop used to print numbers. It will print all the digits
        // of a number by recursing through each digit and printing it out.
        print_dec:
            push r4 on stack r2
            if (r4 <s 10) goto base_case using r1
            r5 := r5 + 1
            r4 := r4 / 10
            goto print_dec


        // base case for the recursive function. This checks if value in 
        // r4 is the final digit to be printed, and outputs it if it is. Will 
        // also exit the recursive function if r5 is 0
        base_case:
            pop r4 off stack r2
            r4 := r4 mod 10
            r4 := r4 + 48
            output r4
            if (r5 == 0) goto finish_printd
            r5 := r5 - 1
            goto base_case